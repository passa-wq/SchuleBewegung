import time
from gpiozero import MotionSensor, LED, Buzzer, Button
from signal import pause
from luma.core.interface.serial import i2c
from luma.oled.device import sh1106
from PIL import Image, ImageDraw, ImageFont

# Setup GPIOs
pir = MotionSensor(17)
led = LED(27)
bz = Buzzer(22)
button = Button(4)  # Button an GPIO4

# OLED Display Setup
serialPort = i2c(port=1, address=0x3c)
oled = sh1106(serialPort, width=128, height=64)
font = ImageFont.load_default()

# Anfangszustand: System ist aus
system_aktiv = False

# Nachricht vom Benutzer
motion_message = input("Was soll als Meldung angezeigt werden?\n")

def wrap_text(text, line_length=23):
    return [text[i:i+line_length] for i in range(0, len(text), line_length)]

def draw_on_monitor(text):
    oled.clear()
    image = Image.new("1", (oled.width, oled.height))
    draw = ImageDraw.Draw(image)
    for i, line in enumerate(wrap_text(text)):
        draw.text((0, i * 10), line, font=font, fill=255)
    oled.display(image)

def motion_detected():
    if system_aktiv:
        print("Bewegung erkannt!")
        led.on()
        bz.on()
        draw_on_monitor(motion_message)
        time.sleep(2)
        led.off()
        bz.off()
        oled.clear()
        oled.show()

def button_pressed():
    global system_aktiv
    if not system_aktiv:
        system_aktiv = True
        print("System ist jetzt aktiv!")
        draw_on_monitor("System ist an")
    else:
        print("System läuft bereits.")

# Zu Beginn: System ist aus, OLED leer
oled.clear()
oled.show()
print(f"System startet deaktiviert.\nNachricht bei Bewegung: '{motion_message}'")
print("Drücke den Knopf, um das System zu aktivieren.")

# Event-Verbindungen
pir.when_motion = motion_detected
button.when_pressed = button_pressed

pause()
